#!/usr/bin/env node

var fs = require('fs');
var moment = require('moment');

var args = require('node-getopt').create([
  ['', 'statsd'],
  ['', 'num-executors=ARG'],
  ['', 'start=ARG'],
  ['', 'end=ARG']
]).bindHelp().parseSystem();

var opts = args.options;

var app_id = args.argv[0];
var max_executor_id = ('num-executors' in opts) ? opts['num-executors'] : 20;

function getTimeArg(key, def) {
  var v = (key in opts) ? opts[key] : def;
  if (v && v[0] == '-') {
    var num = parseInt(v.substr(1));
    var period = v.substr(1 + num.toString().length);
    return moment().subtract(num, period);
  } else {
    return (!!v) ? moment(new Date(v)) : moment();
  }
}

var start_time = getTimeArg('start', '-10m');
var end_time = getTimeArg('end');
var statsd_mode = opts['statsd'];

var id = 1;
function renderString(str, vars, strict) {
  var regex = /\$\{([a-zA-Z_0-9]+)\}/g;
  var ret = '';
  var lastIndex = 0;
  while (true) {
    var m = regex.exec(str);
    if (!m) {
      return ret + str.slice(lastIndex);
    }

    var varname = m[1];
    if (varname == 'id' || (varname in vars)) {
      if (varname == 'id') {
        id++;
        return id;
      } else {
        ret += str.slice(lastIndex, m.index) + vars[varname];
      }
    } else if (strict) {
      throw new Error(
            "Bad key in JSON template: " + varname + ". Available keys:\n" + JSON.stringify(vars, null, 4)
      );
    } else {
      ret += str.slice(lastIndex, m.index + m[0].length);
    }
    lastIndex = regex.lastIndex;
  }
}

function render(json, vars, strict) {
  var tpe = typeof(json);
  if (tpe == 'string') {
    return renderString(json, vars, strict);
  } else if (json instanceof Array) {
    return json.map(function(elem) {
      return render(elem, vars, strict);
    });
  } else if (tpe == 'number' || tpe == 'undefined' || tpe == 'boolean' || json == null) {
    return json;
  } else {
    var obj = {};
    for (k in json) {
      obj[k] = render(json[k], vars, strict);
    }
    return obj;
  }
}

function parseFile(filename) {
  return JSON.parse(fs.readFileSync(filename));
}

function parsePanel(filename) {
  return parseFile("panels/" + filename);
}


var executor_panel = parsePanel("executor.json");
var executor_row = {
  "title": "Executor JVMs",
  "height": "350px",
  "editable": true,
  "collapse": false,
  "panels": []
}

for (var executor_id = 1; executor_id <= max_executor_id; ++executor_id) {
  executor_row.panels.push(
        render(
              executor_panel,
              {
                "executor_id": executor_id
              },
              false
        )
  );
}

var threadpool_row = {
  "title": "threadpool",
  "height": "300px",
  "editable": true,
  "collapse": false,
  "panels": [
    parsePanel("active-tasks.json"),
    parsePanel("completed-tasks.json"),
    parsePanel("completed-tasks-per-minute.json")
  ]
};

var driver_row = {
  "title": "Driver JVM / GC",
  "height": "250px",
  "editable": true,
  "collapse": false,
  "panels": [
    parsePanel("driver-scavenge-gc.json"),
    parsePanel("driver-heap-usage.json"),
    parsePanel("driver-heap-used.json"),
    parsePanel("driver-gc-time-s.json"),
    parsePanel("driver-gc-tiers-generations.json"),
    parsePanel("driver-jvm-totals.json")
  ]
};


var hdfs_row =     {
        "title": "HDFS I/O",
        "height": "300px",
        "editable": true,
        "collapse": false,
        "panels": [
          parsePanel("hdfs-reads-per-second.json"),
          parsePanel("hdfs-reads-per-executor.json"),
          parsePanel("hdfs-reads-per-second-per-executor.json"),
          parsePanel("hdfs-bytes-read.json"),
          parsePanel("hdfs-bytes-read-per-second-per-executor.json")
        ]
      }

var carbon_row =     {
  "title": "Carbon row",
  "height": "250px",
  "editable": true,
  "collapse": false,
  "panels": [
    parsePanel("carbon-metrics.json"),
    parsePanel("carbon-updates.json"),
    parsePanel("carbon-mem.json")
  ]
}

var dashboardJson = parseFile("dashboard.json");
dashboardJson.rows = [
  executor_row,
  threadpool_row,
  driver_row,
  hdfs_row,
  carbon_row
];


var renderedDashboardJson = render(
      dashboardJson,
      {
        "start_time": start_time.format('YYYY-MM-DDTHH:mm:ss.000Z'),
        "end_time": end_time.format('YYYY-MM-DDTHH:mm:ss.000Z'),
        "app_id": app_id,
        "statsd_prefix": statsd_mode ? "stats.gauges." : "",
        "driver_identifier": statsd_mode ? "driver" : "<driver>"
      },
      true
);

var obj = render(
      {
        "user": "guest",
        "group": "guest",
        "title": "${app_id}",
        "tags": [],
        "dashboard": JSON.stringify(renderedDashboardJson)
      },
      {
        "app_id": app_id
      },
      true
);

console.log(JSON.stringify(obj, null, 4));

